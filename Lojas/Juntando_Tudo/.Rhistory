rowwise() %>%
mutate(
Bairro = ifelse(is.na(Bairro) | Bairro == "" | Bairro == "NA",
extrair_bairro_cidade(Plus_Code)$bairro, Bairro),
Cidade = ifelse(is.na(Cidade) | Cidade == "" | Cidade == "NA",
extrair_bairro_cidade(Plus_Code)$cidade, Cidade)
) %>%
ungroup() %>%
mutate(
Cidade = ifelse(is.na(Cidade) | Cidade == "" | Cidade == "NA",
extrair_cidade_de_pluscode_simples(Plus_Code),
Cidade)
)
# Carregar pacotes
library(tidyverse)
library(readxl)
library(writexl)
library(stringr)
library(dplyr)
# Definir o caminho da pasta
caminho_pasta <- "C:/Users/leona/Github/Web-Scraping-Maps-Rstudio/Lojas/Juntando_Tudo"
# Listar todos os arquivos .xlsx na pasta
arquivos <- list.files(caminho_pasta, pattern = "\\.xlsx$", full.names = TRUE)
# Ler todas as planilhas e combiná-las em um único dataframe
dados <- arquivos %>%
map_df(~read_xlsx(.x) %>% mutate(across(everything(), as.character)))
# Função para extrair informações de endereço
extrair_endereco <- function(Endereço) {
rua_aven <- str_extract(Endereço, "^[^-]+")
bairro <- str_extract(Endereço, "(?<=-\\s)[^,]+")
cidade <- str_extract(Endereço, "(?<=,\\s)[^-]+")
if (!is.na(bairro) && (str_detect(bairro, "[0-9,-]") || str_detect(bairro, "^BA$") || str_length(str_trim(bairro)) == 1)) {
bairro <- "NA"
}
if (!is.na(cidade) && (str_detect(cidade, "[0-9,-]") || str_length(str_trim(cidade)) == 1)) {
cidade <- "NA"
}
if (is.na(bairro) || str_trim(bairro) == "") {
bairro <- "NA"
}
return(list(
rua_aven = str_trim(rua_aven),
bairro = str_trim(bairro),
cidade = str_trim(cidade)
))
}
# Função para extrair bairro e cidade do Plus Code
extrair_bairro_cidade <- function(plus_code) {
padrao_completo <- "[A-Z0-9+]+\\s([^,]+),\\s([^\\-]+)"
match <- str_match(plus_code, padrao_completo)
bairro <- ifelse(!is.na(match[, 2]), str_trim(match[, 2]), "NA")
cidade <- ifelse(!is.na(match[, 3]), str_trim(match[, 3]), "NA")
return(list(bairro = bairro, cidade = cidade))
}
# Fallback: extrair cidade de Plus Code simples
extrair_cidade_de_pluscode_simples <- function(plus_code) {
cidade <- str_extract(plus_code, "(?<=^[A-Z0-9+]{7}\\s)[^,]+")
cidade <- str_trim(cidade)
# Verifica se a cidade extraída contém apenas uma palavra (possivelmente um estado), ignora nesses casos
if (is.na(cidade) || str_detect(cidade, "^BA$|^SP$|^RJ$|^MG$|^\\w{1,2}$")) {
return("NA")
}
return(cidade)
}
# VERSÃO VETORIZADA da função para transformar em "NA"
transformar_para_NA <- function(texto) {
termos_na <- c("^r\\.", "^rua", "^av\\.", "^aven\\.", "^avenida", "^s/n", "^sn", "^na")
texto_corrigido <- ifelse(
is.na(texto) | str_trim(texto) == "" |
str_detect(str_to_lower(texto), str_c(termos_na, collapse = "|")),
"NA",
texto
)
return(texto_corrigido)
}
# PROCESSAMENTO PRINCIPAL (corrigido)
dados <- dados %>%
rowwise() %>%
mutate(
endereco_extraido = list(extrair_endereco(Endereço)),
`Rua/Aven` = endereco_extraido$rua_aven,
Bairro = endereco_extraido$bairro,
Cidade = endereco_extraido$cidade
) %>%
ungroup() %>%
select(-endereco_extraido) %>%
mutate(
Bairro = transformar_para_NA(Bairro),
Cidade = transformar_para_NA(Cidade)
) %>%
rowwise() %>%
mutate(
Bairro = ifelse(is.na(Bairro) | Bairro == "" | Bairro == "NA",
extrair_bairro_cidade(Plus_Code)$bairro, Bairro),
Cidade = ifelse(is.na(Cidade) | Cidade == "" | Cidade == "NA",
extrair_bairro_cidade(Plus_Code)$cidade, Cidade)
) %>%
ungroup() %>%
rowwise() %>%  # <-- necessário para linha a linha
mutate(
Cidade = ifelse(is.na(Cidade) | Cidade == "" | Cidade == "NA",
extrair_cidade_de_pluscode_simples(Plus_Code),
Cidade)
) %>%
ungroup()
View(dados)
# Carregar pacotes
library(tidyverse)
library(readxl)
library(writexl)
library(stringr)
library(dplyr)
# Definir o caminho da pasta
caminho_pasta <- "C:/Users/leona/Github/Web-Scraping-Maps-Rstudio/Lojas/Juntando_Tudo"
# Listar todos os arquivos .xlsx na pasta
arquivos <- list.files(caminho_pasta, pattern = "\\.xlsx$", full.names = TRUE)
# Ler todas as planilhas e combiná-las em um único dataframe
dados <- arquivos %>%
map_df(~read_xlsx(.x) %>% mutate(across(everything(), as.character)))
# Função para extrair informações de endereço
extrair_endereco <- function(Endereço) {
rua_aven <- str_extract(Endereço, "^[^-]+")
bairro <- str_extract(Endereço, "(?<=-\\s)[^,]+")
cidade <- str_extract(Endereço, "(?<=,\\s)[^-]+")
if (!is.na(bairro) && (str_detect(bairro, "[0-9,-]") || str_detect(bairro, "^BA$") || str_length(str_trim(bairro)) == 1)) {
bairro <- "NA"
}
if (!is.na(cidade) && (str_detect(cidade, "[0-9,-]") || str_length(str_trim(cidade)) == 1)) {
cidade <- "NA"
}
if (is.na(bairro) || str_trim(bairro) == "") {
bairro <- "NA"
}
return(list(
rua_aven = str_trim(rua_aven),
bairro = str_trim(bairro),
cidade = str_trim(cidade)
))
}
# Função para extrair bairro e cidade do Plus Code
extrair_bairro_cidade <- function(plus_code) {
padrao_completo <- "[A-Z0-9+]+\\s([^,]+),\\s([^\\-]+)"
match <- str_match(plus_code, padrao_completo)
bairro <- ifelse(!is.na(match[, 2]), str_trim(match[, 2]), "NA")
cidade <- ifelse(!is.na(match[, 3]), str_trim(match[, 3]), "NA")
return(list(bairro = bairro, cidade = cidade))
}
# Fallback: extrair cidade de Plus Code simples
extrair_cidade_de_pluscode_simples <- function(plus_code) {
cidade <- str_extract(plus_code, "(?<=^[A-Z0-9+]{7}\\s)[^,]+")
cidade <- str_trim(cidade)
# Verifica se a cidade extraída contém apenas uma palavra (possivelmente um estado), ignora nesses casos
if (is.na(cidade) || str_detect(cidade, "^BA$|^SP$|^RJ$|^MG$|^\\w{1,2}$")) {
return("NA")
}
return(cidade)
}
# VERSÃO VETORIZADA da função para transformar em "NA"
transformar_para_NA <- function(texto) {
termos_na <- c("^r\\.", "^rua", "^av\\.", "^aven\\.", "^avenida", "^s/n", "^sn", "^na")
texto_corrigido <- ifelse(
is.na(texto) | str_trim(texto) == "" |
str_detect(str_to_lower(texto), str_c(termos_na, collapse = "|")),
"NA",
texto
)
return(texto_corrigido)
}
# PROCESSAMENTO PRINCIPAL (corrigido)
dados <- dados %>%
rowwise() %>%
mutate(
endereco_extraido = list(extrair_endereco(Endereço)),
`Rua/Aven` = endereco_extraido$rua_aven,
Bairro = endereco_extraido$bairro,
Cidade = endereco_extraido$cidade
) %>%
ungroup() %>%
select(-endereco_extraido) %>%
mutate(
Bairro = transformar_para_NA(Bairro),
Cidade = transformar_para_NA(Cidade)
) %>%
rowwise() %>%
mutate(
Bairro = ifelse(is.na(Bairro) | Bairro == "" | Bairro == "NA",
extrair_bairro_cidade(Plus_Code)$bairro, Bairro),
Cidade_temp = extrair_bairro_cidade(Plus_Code)$cidade,
Cidade = ifelse(is.na(Cidade) | Cidade == "" | Cidade == "NA",
Cidade_temp, Cidade)
) %>%
ungroup() %>%
select(-Cidade_temp) %>%
rowwise() %>%
mutate(
Cidade = ifelse(is.na(Cidade) | Cidade == "" | Cidade == "NA",
extrair_cidade_de_pluscode_simples(Plus_Code),
Cidade)
) %>%
ungroup()
View(dados)
# Carregar pacotes
library(tidyverse)
library(readxl)
library(writexl)
library(stringr)
library(dplyr)
# Definir o caminho da pasta
caminho_pasta <- "C:/Users/leona/Github/Web-Scraping-Maps-Rstudio/Lojas/Juntando_Tudo"
# Listar todos os arquivos .xlsx na pasta
arquivos <- list.files(caminho_pasta, pattern = "\\.xlsx$", full.names = TRUE)
# Ler todas as planilhas e combiná-las em um único dataframe
dados <- arquivos %>%
map_df(~read_xlsx(.x) %>% mutate(across(everything(), as.character)))
# Função para extrair informações de endereço
extrair_endereco <- function(Endereço) {
rua_aven <- str_extract(Endereço, "^[^-]+")
bairro <- str_extract(Endereço, "(?<=-\\s)[^,]+")
cidade <- str_extract(Endereço, "(?<=,\\s)[^-]+")
if (!is.na(bairro) && (str_detect(bairro, "[0-9,-]") || str_detect(bairro, "^BA$") || str_length(str_trim(bairro)) == 1)) {
bairro <- "NA"
}
if (!is.na(cidade) && (str_detect(cidade, "[0-9,-]") || str_length(str_trim(cidade)) == 1)) {
cidade <- "NA"
}
if (is.na(bairro) || str_trim(bairro) == "") {
bairro <- "NA"
}
return(list(
rua_aven = str_trim(rua_aven),
bairro = str_trim(bairro),
cidade = str_trim(cidade)
))
}
# Função para extrair bairro e cidade do Plus Code
extrair_bairro_cidade <- function(plus_code) {
partes <- str_match(plus_code, "[A-Z0-9+]+\\s([^,]+),\\s([^\\-]+)")
n_partes_validas <- ifelse(!is.na(partes[,2]) & !is.na(partes[,3]), 2, 0)
if (n_partes_validas == 2) {
# Testar se há traço após o segundo grupo (indicando estado)
estado_presente <- str_detect(plus_code, "-\\s*[A-Z]{2}$")
if (estado_presente) {
# Plus code completo: bairro + cidade + estado
bairro <- str_trim(partes[,2])
cidade <- str_trim(partes[,3])
} else {
# Plus code incompleto: cidade + estado → ignorar o bairro
bairro <- "NA"
cidade <- str_trim(partes[,2])
}
} else {
bairro <- "NA"
cidade <- "NA"
}
return(list(bairro = bairro, cidade = cidade))
}
# Fallback: extrair cidade de Plus Code simples
extrair_cidade_de_pluscode_simples <- function(plus_code) {
cidade <- str_extract(plus_code, "(?<=^[A-Z0-9+]{7}\\s)[^,]+")
cidade <- str_trim(cidade)
# Verifica se a cidade extraída contém apenas uma palavra (possivelmente um estado), ignora nesses casos
if (is.na(cidade) || str_detect(cidade, "^BA$|^SP$|^RJ$|^MG$|^\\w{1,2}$")) {
return("NA")
}
return(cidade)
}
# VERSÃO VETORIZADA da função para transformar em "NA"
transformar_para_NA <- function(texto) {
termos_na <- c("^r\\.", "^rua", "^av\\.", "^aven\\.", "^avenida", "^s/n", "^sn", "^na")
texto_corrigido <- ifelse(
is.na(texto) | str_trim(texto) == "" |
str_detect(str_to_lower(texto), str_c(termos_na, collapse = "|")),
"NA",
texto
)
return(texto_corrigido)
}
# PROCESSAMENTO PRINCIPAL (corrigido)
dados <- dados %>%
rowwise() %>%
mutate(
endereco_extraido = list(extrair_endereco(Endereço)),
`Rua/Aven` = endereco_extraido$rua_aven,
Bairro = endereco_extraido$bairro,
Cidade = endereco_extraido$cidade
) %>%
ungroup() %>%
select(-endereco_extraido) %>%
mutate(
Bairro = transformar_para_NA(Bairro),
Cidade = transformar_para_NA(Cidade)
) %>%
rowwise() %>%
mutate(
bairro_cidade = list(extrair_bairro_cidade(Plus_Code)),
Cidade = ifelse(is.na(Cidade) | Cidade == "" | Cidade == "NA",
bairro_cidade$cidade, Cidade),
Bairro = ifelse((is.na(Bairro) | Bairro == "" | Bairro == "NA") &
bairro_cidade$bairro != "NA",
bairro_cidade$bairro, Bairro)
) %>%
ungroup() %>%
select(-bairro_cidade) %>%
rowwise() %>%
mutate(
Cidade = ifelse(is.na(Cidade) | Cidade == "" | Cidade == "NA",
extrair_cidade_de_pluscode_simples(Plus_Code),
Cidade)
) %>%
ungroup()
View(dados)
# Salvar resultado final
write_xlsx(dados, "C:/Users/leona/Github/Web-Scraping-Maps-Rstudio/Lojas.xlsx")
# Carregar pacotes
library(readxl)
library(dplyr)
library(openxlsx)
library(here)
# Definir o caminho base
caminho_base <- "C:/Users/leona/Github/Web-Scraping-Maps-Rstudio/Lojas/Juntando_Tudo"
# Listar todos os arquivos .xlsx no diretório
arquivos_xlsx <- list.files(caminho_base, pattern = "\\.xlsx$", full.names = TRUE)
# Carregar os arquivos Excel em uma lista de dataframes
todos_dfs <- lapply(arquivos_xlsx, read_excel)
# Unir os dataframes
df_total <- bind_rows(todos_dfs)
# Transferir valores da coluna "Estrelas" para "⭐", se "⭐" estiver vazio
df_total <- df_total %>%
mutate(`⭐` = ifelse(is.na(`⭐`) & !is.na(Estrelas), Estrelas, `⭐`)) %>%
select(-Estrelas)
# Preencher valores ausentes com base em duplicatas por "Loja" e "Endereço"
df_total <- df_total %>%
group_by(Loja, Endereço) %>%
mutate(
Bairro = ifelse(is.na(Bairro), first(na.omit(Bairro)), Bairro),
`Rua/Aven` = ifelse(is.na(`Rua/Aven`), first(na.omit(`Rua/Aven`)), `Rua/Aven`),
Cidade = ifelse(is.na(Cidade), first(na.omit(Cidade)), Cidade),
Loc = ifelse(is.na(Loc), first(na.omit(Loc)), Loc)
) %>%
ungroup()
# Remover duplicatas com base em "Loja" e "Bairro"
df_total_unico <- df_total %>%
distinct(Loja, Bairro, .keep_all = TRUE)
# Verificar número de lojas únicas
num_lojas_unicas <- nrow(df_total_unico)
cat("Número de lojas únicas após remoção de duplicatas:", num_lojas_unicas, "\n")
# Caminho para o modelo com formatação
modelo_path <- "C:/Users/leona/Github/Web-Scraping-Maps-Rstudio/Lojas/ACOMPANHAMENTO ROTA SOLLAR - Lojas_Unicas_Loc_Emails_coord.22.03.25.xlsx"
# Carregar o modelo com formatação
wb <- loadWorkbook(modelo_path)
# Substituir os dados na primeira planilha, a partir da linha 2 (mantendo cabeçalhos formatados)
writeData(wb, sheet = 1, x = df_total_unico, startRow = 2, colNames = FALSE)
# Carregar pacotes
library(readxl)
library(dplyr)
library(openxlsx)
library(here)
# Definir o caminho base
caminho_base <- "C:/Users/leona/Github/Web-Scraping-Maps-Rstudio/Lojas/Juntando_Tudo"
# Listar todos os arquivos .xlsx no diretório
arquivos_xlsx <- list.files(caminho_base, pattern = "\\.xlsx$", full.names = TRUE)
# Carregar os arquivos Excel em uma lista de dataframes
todos_dfs <- lapply(arquivos_xlsx, read_excel)
# Unir os dataframes
df_total <- bind_rows(todos_dfs)
# Transferir valores da coluna "Estrelas" para "⭐", se "⭐" estiver vazio
df_total <- df_total %>%
mutate(`⭐` = ifelse(is.na(`⭐`) & !is.na(Estrelas), Estrelas, `⭐`)) %>%
select(-Estrelas)
# Preencher valores ausentes com base em duplicatas por "Loja" e "Endereço"
df_total <- df_total %>%
group_by(Loja, Endereço) %>%
mutate(
Bairro = ifelse(is.na(Bairro), first(na.omit(Bairro)), Bairro),
`Rua/Aven` = ifelse(is.na(`Rua/Aven`), first(na.omit(`Rua/Aven`)), `Rua/Aven`),
Cidade = ifelse(is.na(Cidade), first(na.omit(Cidade)), Cidade),
Loc = ifelse(is.na(Loc), first(na.omit(Loc)), Loc)
) %>%
ungroup()
# Remover duplicatas com base em "Loja" e "Bairro"
df_total_unico <- df_total %>%
distinct(Loja, Bairro, .keep_all = TRUE)
# Verificar número de lojas únicas
num_lojas_unicas <- nrow(df_total_unico)
cat("Número de lojas únicas após remoção de duplicatas:", num_lojas_unicas, "\n")
# Caminho para o modelo com formatação
modelo_path <- "modelo_path <- "C:/Users/leona/Github/Web-Scraping-Maps-Rstudio/Lojas/ACOMPANHAMENTO_ROTA_SOLLAR_Lojas_Unicas_Loc_Emails_coord.22.03.25.xlsx
# Caminho para o modelo com formatação
modelo_path <- "C:/Users/leona/Github/Web-Scraping-Maps-Rstudio/Lojas/ACOMPANHAMENTO_ROTA_SOLLAR_Lojas_Unicas_Loc_Emails_coord.22.03.25.xlsx"
# Carregar o modelo com formatação
wb <- loadWorkbook(modelo_path)
View(df_total_unico)
list.files("C:/Users/leona/Github/Web-Scraping-Maps-Rstudio/Lojas", pattern = "\\.xlsx$")
# Carregar pacotes
library(readxl)
library(dplyr)
library(openxlsx)
library(here)
# Definir o caminho base
caminho_base <- "C:/Users/leona/Github/Web-Scraping-Maps-Rstudio/Lojas/Juntando_Tudo"
# Listar todos os arquivos .xlsx no diretório
arquivos_xlsx <- list.files(caminho_base, pattern = "\\.xlsx$", full.names = TRUE)
# Carregar os arquivos Excel em uma lista de dataframes
todos_dfs <- lapply(arquivos_xlsx, read_excel)
# Unir os dataframes
df_total <- bind_rows(todos_dfs)
# Transferir valores da coluna "Estrelas" para "⭐", se "⭐" estiver vazio
df_total <- df_total %>%
mutate(`⭐` = ifelse(is.na(`⭐`) & !is.na(Estrelas), Estrelas, `⭐`)) %>%
select(-Estrelas)
# Preencher valores ausentes com base em duplicatas por "Loja" e "Endereço"
df_total <- df_total %>%
group_by(Loja, Endereço) %>%
mutate(
Bairro = ifelse(is.na(Bairro), first(na.omit(Bairro)), Bairro),
`Rua/Aven` = ifelse(is.na(`Rua/Aven`), first(na.omit(`Rua/Aven`)), `Rua/Aven`),
Cidade = ifelse(is.na(Cidade), first(na.omit(Cidade)), Cidade),
Loc = ifelse(is.na(Loc), first(na.omit(Loc)), Loc)
) %>%
ungroup()
# Remover duplicatas com base em "Loja" e "Bairro"
df_total_unico <- df_total %>%
distinct(Loja, Bairro, .keep_all = TRUE)
# Verificar número de lojas únicas
num_lojas_unicas <- nrow(df_total_unico)
cat("Número de lojas únicas após remoção de duplicatas:", num_lojas_unicas, "\n")
# Caminho para o modelo com formatação
modelo_path <- "C:/Users/leona/Github/Web-Scraping-Maps-Rstudio/Lojas/Juntando_Tudo/ACOMPANHAMENTO_ROTA_SOLLAR_Lojas_Unicas_Loc_Emails_coord.22.03.25.xlsx"
# Carregar o modelo com formatação
wb <- loadWorkbook(modelo_path)
# Substituir os dados na primeira planilha, a partir da linha 2 (mantendo cabeçalhos formatados)
writeData(wb, sheet = 1, x = df_total_unico, startRow = 2, colNames = FALSE)
# Caminho de saída para novo arquivo formatado
caminho_saida_formatado <- "C:/Users/leona/Github/Web-Scraping-Maps-Rstudio/Lojas/df_total_unico_formatado.xlsx"
View(df_total_unico)
# Salvar o novo arquivo com os dados e formatação preservada
saveWorkbook(wb, caminho_saida_formatado, overwrite = TRUE)
library(openxlsx)
# Caminhos dos arquivos
modelo_path <- "C:/Users/leona/Downloads/teste/ACOMPANHAMENTO_ROTA_SOLLAR_Lojas_Unicas_Loc_Emails_coord.22.03.25.xlsx"
# Carregar a planilha modelo com formatação
wb <- loadWorkbook(modelo_path)
names(df_total_unico_formatado) <- names(read.xlsx(modelo_path, sheet = 1, rows = 1))
names(df_total_unico_formatado.xlsx) <- names(read.xlsx(modelo_path, sheet = 1, rows = 1))
# Caminhos dos arquivos
modelo_path <- "C:/Users/leona/Downloads/teste/ACOMPANHAMENTO_ROTA_SOLLAR_Lojas_Unicas_Loc_Emails_coord.22.03.25.xlsx"
# Carregar a planilha modelo com formatação
wb <- loadWorkbook(modelo_path)
# Sobrescrever os dados na primeira planilha (sheet = 1), a partir da linha 2
writeData(
wb,
sheet = 1,
x = df_total_unico_formatado,
startRow = 2,
colNames = FALSE
)
# Exemplo: criar ou carregar o dataframe df_total_unico_formatado antes de renomear as colunas
df_total_unico_formatado <- read.xlsx("caminho/do/arquivo/que/contem/os/dados.xlsx", sheet = 1)
library(openxlsx)
# Caminhos dos arquivos
modelo_path <- "D:/Meu Drive/Rota/ACOMPANHAMENTO_ROTA_SOLLAR_Lojas_Unicas_Loc_Emails_coord.22.03.25.xlsx"
# Carregar a planilha modelo com formatação
wb <- loadWorkbook(modelo_path)
# Sobrescrever os dados na primeira planilha (sheet = 1), a partir da linha 2
writeData(
wb,
sheet = 1,
x = df_total_unico_formatado,
startRow = 2,
colNames = FALSE
)
library(openxlsx)
# Caminhos dos arquivos
modelo_path <- "C:/Users/leona/Downloads/teste/ACOMPANHAMENTO_ROTA_SOLLAR_Lojas_Unicas_Loc_Emails_coord.22.03.25.xlsx"
dados_path <- "C:/Users/leona/Downloads/teste/df_total_unico_formatado.xlsx"
# Carregar a planilha modelo com formatação
wb <- loadWorkbook(modelo_path)
# Carregar os dados a serem inseridos
df_total_unico_formatado <- read.xlsx(dados_path, sheet = 1)
# Ajustar os nomes das colunas para combinar com o modelo
names(df_total_unico_formatado) <- names(read.xlsx(modelo_path, sheet = 1, rows = 1))
# Sobrescrever os dados na primeira planilha (sheet = 1), a partir da linha 2
writeData(
wb,
sheet = 1,
x = df_total_unico_formatado,
startRow = 2,
colNames = FALSE
)
View(df_total_unico_formatado)
# Salvar no mesmo arquivo
saveWorkbook(wb, modelo_path, overwrite = TRUE)
library(openxlsx)
# Caminhos dos arquivos
modelo_path <- "D:/Meu Drive/Rota/ACOMPANHAMENTO_ROTA_SOLLAR_Lojas_Unicas_Loc_Emails_coord.22.03.25.xlsx"
dados_path <- "D:/Meu Drive/Rota/df_total_unico_formatado.xlsx"
# Carregar a planilha modelo com formatação
wb <- loadWorkbook(modelo_path)
# Carregar os dados a serem inseridos
df_total_unico_formatado <- read.xlsx(dados_path, sheet = 1)
# Ajustar os nomes das colunas para combinar com o modelo
names(df_total_unico_formatado) <- names(read.xlsx(modelo_path, sheet = 1, rows = 1))
# Sobrescrever os dados na primeira planilha (sheet = 1), a partir da linha 2
writeData(
wb,
sheet = 1,
x = df_total_unico_formatado,
startRow = 2,
colNames = FALSE
)
# Salvar no mesmo arquivo
saveWorkbook(wb, modelo_path, overwrite = TRUE)
