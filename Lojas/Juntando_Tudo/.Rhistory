}
View(dados_na_corrigidos)
View(dados_na)
View(dados_geo)
# Exibir resumo do processo
print(paste("Total de endereços no dataset original:", nrow(dados)))
print(paste("Endereços sem coordenadas na primeira tentativa:", nrow(dados_na)))
print(paste("Endereços corrigidos na segunda tentativa:", sum(!is.na(dados_geo$latitude))))
print(paste("Total de endereços geocodificados com sucesso:", sum(!is.na(dados_geo$latitude))))
View(dados_na)
# Salvar os endereços que ainda precisam ser geocodificados
write_xlsx(dados_na, "C:/Users/leona/Github/Web-Scraping-Maps-Rstudio/Lojas/Juntando Tudo/rodar_de_novo_here_maps.xlsx")
# Substituir todas as coordenadas em `dados_na` por NA
dados_na <- dados_na %>%
mutate(latitude = NA, longitude = NA)
# Substituir todas as coordenadas em `dados_na` por NA
dados_na <- dados_na %>%
mutate(latitude = NAb, longitude = Nb)
print("dados_na")
View(dados_na)
# Carregar pacotes
library(httr)
library(jsonlite)
library(readxl)
library(dplyr)
library(writexl)
# Definir sua API Key da HERE Maps
api_key <- "8__EX014cinJzotz2TuJPXeoWKB9v_ZnPQjiR-3lJvA"
# Definir sua API Key da HERE Maps
api_key <- "gwuKJLfxYYmARME7OlC7rIFjJgweQhI_1nFB8QS3DAs"
# Função para geocodificação usando a API da HERE Maps
geocode_here <- function(endereco) {
url <- paste0("https://geocode.search.hereapi.com/v1/geocode?q=",
URLencode(endereco), "&apiKey=", api_key)
resposta <- GET(url)
if (status_code(resposta) == 200) {
dados <- content(resposta, as = "parsed", type = "application/json")
if (length(dados$items) > 0) {
latitude <- dados$items[[1]]$position$lat
longitude <- dados$items[[1]]$position$lng
return(c(latitude, longitude))
}
}
return(c(NA, NA))
}
# Caminho do arquivo
arquivo_xlsx <- "C:/Users/leona/Github/Web-Scraping-Maps-Rstudio/Lojas/Juntando Tudo/rodar_de_novo_here_maps.xlsx"
# Leia o arquivo
dados <- read_excel(arquivo_xlsx)
# Aplicar a função de geocodificação a cada endereço
dados_geo <- dados %>%
rowwise() %>%
mutate(coord = list(geocode_here(Endereço))) %>%
unnest_wider(coord, names_sep = "_") %>%
rename(latitude = coord_1, longitude = coord_2)
# Remover colunas existentes com os mesmos nomes antes da renomeação
dados_geo <- dados_geo %>%
select(-latitude, -longitude) %>%
rename(latitude = coord_1, longitude = coord_2)
# Aplicar a função de geocodificação a cada endereço
dados_geo <- dados %>%
dados_geo <- dados_geo %>%
select(-latitude, -longitude) %>%
rename(latitude = coord_1, longitude = coord_2)
# Aplicar a função de geocodificação a cada endereço
dados_geo <- dados %>%
rowwise() %>%
mutate(coord = list(geocode_here(Endereço))) %>%
unnest_wider(coord, names_sep = "_") %>%
dados_geo <- dados_geo %>%
select(-latitude, -longitude) %>%
rename(latitude = coord_1, longitude = coord_2)
# Aplicar a função de geocodificação a cada endereço
dados_geo <- dados %>%
rowwise() %>%
mutate(coord = list(geocode_here(Endereço))) %>%
unnest_wider(coord, names_sep = "_")
# Remover colunas existentes com os mesmos nomes antes da renomeação
dados_geo <- dados_geo %>%
select(-latitude, -longitude, everything()) %>%  # Garante que latitude e longitude antigas sejam removidas
rename(latitude = coord_1, longitude = coord_2)
# Leia o arquivo
dados <- read_excel(arquivo_xlsx)
View(dados_geo)
# Carregar pacotes
library(httr)
library(jsonlite)
library(readxl)
library(dplyr)
library(writexl)
# Definir sua API Key da HERE Maps
api_key <- "gwuKJLfxYYmARME7OlC7rIFjJgweQhI_1nFB8QS3DAs"
# Função para geocodificação usando a API da HERE Maps
geocode_here <- function(endereco) {
url <- paste0("https://geocode.search.hereapi.com/v1/geocode?q=",
URLencode(endereco), "&apiKey=", api_key)
resposta <- GET(url)
if (status_code(resposta) == 200) {
dados <- content(resposta, as = "parsed", type = "application/json")
if (length(dados$items) > 0) {
latitude <- dados$items[[1]]$position$lat
longitude <- dados$items[[1]]$position$lng
return(c(latitude, longitude))
}
}
return(c(NA, NA))
}
# Caminho do arquivo
arquivo_xlsx <- "C:/Users/leona/Github/Web-Scraping-Maps-Rstudio/Lojas/Juntando Tudo/rodar_de_novo_here_maps.xlsx"
# Leia o arquivo
dados <- read_excel(arquivo_xlsx)
# Remova colunas antigas de latitude e longitude se existirem
dados <- dados %>% select(-any_of(c("latitude", "longitude")))
# Aplicar a função de geocodificação a cada endereço
dados_geo <- dados %>%
rowwise() %>%
mutate(coord = list(geocode_here(Endereço))) %>%
unnest_wider(coord, names_sep = "_") %>%
rename(latitude = coord_1, longitude = coord_2)
# Identificar falhas
dados_na <- dados_geo %>%
filter(is.na(latitude) | is.na(longitude))
View(dados_geo)
View(dados_na)
View(dados)
View(dados_geo)
# Remova colunas antigas de latitude e longitude se existirem
dados <- dados %>% select(-any_of(c("latitude", "longitude")))
View(dados_geo)
# Remova colunas antigas de latitude e longitude se existirem
dados <- dados %>% select(-any_of(c("latitude", "longitude")))
View(dados)     # Exibe o dataframe original antes da geocodificação
View(dados_geo) # Exibe o dataframe após a geocodificação
# Verifica se as colunas latitude e longitude existem antes de removê-las
if ("latitude" %in% colnames(dados)) {
dados <- dados %>% select(-latitude)
}
if ("longitude" %in% colnames(dados)) {
dados <- dados %>% select(-longitude)
}
# Função para geocodificação usando a API da HERE Maps
geocode_here <- function(endereco) {
url <- paste0("https://geocode.search.hereapi.com/v1/geocode?q=",
URLencode(endereco), "&apiKey=", api_key)
resposta <- GET(url)
if (status_code(resposta) == 200) {
dados <- content(resposta, as = "parsed", type = "application/json")
if (length(dados$items) > 0) {
latitude <- dados$items[[1]]$position$lat
longitude <- dados$items[[1]]$position$lng
return(c(latitude, longitude))
}
}
return(c(NA, NA))
}
# Aplicar a função de geocodificação a cada endereço
dados_geo <- dados %>%
rowwise() %>%
mutate(coord = list(geocode_here(Endereço))) %>%
unnest_wider(coord, names_sep = "_") %>%
rename(latitude = coord_1, longitude = coord_2)
View(dados_geo)
# Caminho do arquivo
arquivo_xlsx <- "C:/Users/leona/Github/Web-Scraping-Maps-Rstudio/Lojas/Juntando Tudo/rodar_de_novo_here_maps.xlsx"
# Carregar pacotes
library(tidygeocoder)
library(readxl)
library(dplyr)
library(writexl)
# Leia o arquivo
dados <- read_excel(arquivo_xlsx)
# Primeira tentativa de geocodificação usando apenas o endereço completo
dados_geo <- dados %>%
geocode(address = `Endereço`, method = "osm", lat = latitude, long = longitude)
# Identificar os casos em que a geocodificação falhou (NA)
dados_na <- dados_geo %>%
filter(is.na(latitude) | is.na(longitude))
View(dados_geo)
# Identificar os casos em que a geocodificação falhou (NA)
dados_na <- dados_geo %>%
filter(is.na(latitude) | is.na(longitude))
# Identificar os casos em que a geocodificação falhou (NA)
dados_na <- dados_geo %>%
filter(is.na(`latitude...13`) | is.na(`longitude...14`))
View(dados_na)
dados_geo <- dados_geo %>%
select(-c(11, 12))
View(dados)
View(dados_geo)
# Salvar o resultado atualizado em um novo arquivo
write_xlsx(dados_geo, "C:/Users/leona/Github/Web-Scraping-Maps-Rstudio/Lojas/Juntando Tudo/rodar_de_novo_here_maps.xlsx")
# Salvar o resultado atualizado em um novo arquivo
write_xlsx(dados_geo, "C:\\Users\\leona\\Github\\Web-Scraping-Maps-Rstudio\\Lojas\\Juntando_Tudo\\rodar_de_novo_here_maps.xlsx")
# Salvar o resultado atualizado em um novo arquivo
write_xlsx(dados_geo, "C:/Users/leona/Github/Web-Scraping-Maps-Rstudio/Lojas/ajustar.xlsx")
# Carregar pacotes necessários
library(readxl)
library(dplyr)
# Carregar os arquivos Excel
criando_coord <- read_excel("Criando_coord.xlsx")
criando_coord_here <- read_excel("Criando_coord_HERE.xlsx")
# Carregar pacotes necessários
library(readxl)
library(dplyr)
library(openxlsx)  # Para salvar o resultado em Excel
# Definir o diretório de trabalho (se necessário)
setwd("C:/Users/leona/Github/Web-Scraping-Maps-Rstudio/Lojas/Juntando Tudo")
# Carregar os arquivos Excel
criando_coord <- read_excel("Criando_coord.xlsx")
criando_coord_here <- read_excel("Criando_coord_HERE.xlsx")
# Unir os dois conjuntos de dados
dados_combinados <- bind_rows(criando_coord, criando_coord_here)
# Identificar lojas duplicadas
lojas_duplicadas <- dados_combinados %>%
group_by(Nome_Loja) %>%  # Substitua pelo nome correto da coluna
filter(n() > 1) %>%
ungroup()
colnames(dados_combinados)
# Identificar lojas duplicadas
lojas_duplicadas <- dados_combinados %>%
group_by(Loja) %>%  # Substitua pelo nome correto da coluna
filter(n() > 1) %>%
ungroup()
# Remover linhas que possuem NA em qualquer coluna
lojas_filtradas <- lojas_duplicadas %>%
na.omit()
# Carregar pacotes necessários
library(readxl)
library(dplyr)
library(openxlsx)  # Para salvar o resultado em Excel
# Definir o diretório de trabalho (se necessário)
setwd("C:/Users/leona/Github/Web-Scraping-Maps-Rstudio/Lojas/Juntando Tudo")
# Carregar os arquivos Excel
criando_coord <- read_excel("Criando_coord.xlsx")
criando_coord_here <- read_excel("Criando_coord_HERE.xlsx")
# Unir os dois conjuntos de dados
dados_combinados <- bind_rows(criando_coord, criando_coord_here)
# Identificar lojas duplicadas
lojas_duplicadas <- dados_combinados %>%
group_by(Loja) %>%  # Substitua pelo nome correto da coluna
filter(n() > 1) %>%
ungroup()
# Remover linhas que possuem NA em qualquer coluna
lojas_filtradas <- lojas_duplicadas %>%
na.omit()
# Visualizar o resultado
print(lojas_filtradas)
# Carregar pacotes necessários
library(readxl)
library(dplyr)
library(openxlsx)  # Para salvar o resultado em Excel
# Definir o diretório de trabalho (se necessário)
setwd("C:/Users/leona/Github/Web-Scraping-Maps-Rstudio/Lojas/Juntando Tudo")
# Carregar os arquivos Excel
criando_coord <- read_excel("Criando_coord.xlsx")
criando_coord_here <- read_excel("Criando_coord_HERE.xlsx")
# Unir os dois conjuntos de dados
dados_combinados <- bind_rows(criando_coord, criando_coord_here)
# Identificar lojas duplicadas
lojas_duplicadas <- dados_combinados %>%
group_by(Loja) %>%  # Substitua pelo nome correto da coluna
filter(n() > 1) %>%
ungroup()
# Remover apenas as duplicatas que possuem NA na coluna "longitude"
lojas_filtradas <- lojas_duplicadas %>%
filter(!(is.na(longitude)))  # Remove apenas onde longitude for NA
# Carregar pacotes necessários
library(readxl)
library(dplyr)
library(openxlsx)  # Para salvar o resultado em Excel
# Definir o diretório de trabalho (se necessário)
setwd("C:/Users/leona/Github/Web-Scraping-Maps-Rstudio/Lojas/Juntando Tudo")
# Carregar os arquivos Excel
criando_coord <- read_excel("Criando_coord.xlsx")
criando_coord_here <- read_excel("Criando_coord_HERE.xlsx")
# Unir os dois conjuntos de dados
dados_combinados <- bind_rows(criando_coord, criando_coord_here)
# Identificar lojas duplicadas
lojas_duplicadas <- dados_combinados %>%
group_by(Loja) %>%  # Substitua pelo nome correto da coluna
filter(n() > 1) %>%
ungroup()
# Remover linhas que possuem NA em qualquer coluna
lojas_filtradas <- lojas_duplicadas %>%
na.omit()
# Remover apenas as duplicatas que possuem NA na coluna "longitude"
lojas_filtradas <- lojas_duplicadas %>%
filter(!(is.na(latitude)))  # Remove apenas onde longitude for NA
# Remover apenas as duplicatas que possuem NA na coluna "longitude"
lojas_filtradas <- lojas_duplicadas %>%
filter(!(is.na(bairro)))  # Remove apenas onde longitude for NA
longitude
View(lojas_filtradas)
# Identificar lojas duplicadas
lojas_duplicadas <- dados_combinados %>%
group_by(Loja) %>%  # Substitua pelo nome correto da coluna
filter(n() > 1) %>%
ungroup()
# Remover apenas as duplicatas que possuem NA na coluna "longitude"
lojas_filtradas <- lojas_duplicadas %>%
filter(!(is.na(bairro)))  # Remove apenas onde longitude for NA
# Remover apenas as duplicatas que possuem NA na coluna "longitude"
lojas_filtradas <- lojas_duplicadas %>%
filter(!(is.na(Cidade)))  # Remove apenas onde longitude for NA
# Remover apenas as duplicatas que possuem NA na coluna "longitude"
lojas_filtradas <- lojas_duplicadas %>%
filter(!(is.na(longitude)))  # Remove apenas onde longitude for NA
View(lojas_duplicadas)
View(lojas_filtradas)
View(lojas_duplicadas)
# Carregar pacotes necessários
library(readxl)
library(dplyr)
library(openxlsx)  # Para salvar o resultado em Excel
# Definir o diretório de trabalho (se necessário)
setwd("C:/Users/leona/Github/Web-Scraping-Maps-Rstudio/Lojas/Juntando Tudo")
# Carregar os arquivos Excel
criando_coord <- read_excel("Criando_coord.xlsx")
criando_coord_here <- read_excel("Criando_coord_HERE.xlsx")
# Unir os dois conjuntos de dados
dados_combinados <- bind_rows(criando_coord, criando_coord_here)
# Identificar lojas duplicadas
lojas_duplicadas <- dados_combinados %>%
group_by(Loja) %>%  # Substitua pelo nome correto da coluna
filter(n() > 1) %>%
ungroup()
# Separar lojas que possuem pelo menos um valor de longitude preenchido
lojas_com_longitude <- lojas_duplicadas %>%
filter(!is.na(longitude))
# Separar lojas onde todas as duplicatas têm NA em longitude e remover apenas uma entrada
lojas_todas_na <- lojas_duplicadas %>%
filter(is.na(longitude)) %>%
group_by(Loja) %>%
slice(-1) %>%  # Remove apenas uma duplicata (mantém pelo menos uma)
ungroup()
View(lojas_todas_na)
# Remover todas as lojas duplicadas de dados_combinados
dados_combinados <- dados_combinados %>%
filter(!Loja %in% lojas_duplicadas$Loja)
# Inserir as lojas_com_longitude de volta em dados_combinados
dados_combinados <- bind_rows(dados_combinados, lojas_com_longitude)
na_combinados_longitude <- dados_combinados %>%
filter(is.na(longitude))
View(na_combinados_longitude)
View(dados_combinados)
dados_combinados <- bind_rows(lojas_todas_na)
# Inserir as lojas_com_longitude e lojas_todas_na de volta em dados_combinados
dados_combinados <- bind_rows(dados_combinados, lojas_com_longitude, lojas_todas_na)
# Carregar pacotes necessários
library(readxl)
library(dplyr)
library(openxlsx)  # Para salvar o resultado em Excel
# Definir o diretório de trabalho (se necessário)
setwd("C:/Users/leona/Github/Web-Scraping-Maps-Rstudio/Lojas/Juntando Tudo")
# Carregar os arquivos Excel
criando_coord <- read_excel("Criando_coord.xlsx")
criando_coord_here <- read_excel("Criando_coord_HERE.xlsx")
# Unir os dois conjuntos de dados
dados_combinados <- bind_rows(criando_coord, criando_coord_here)
# Identificar lojas duplicadas
lojas_duplicadas <- dados_combinados %>%
group_by(Loja) %>%  # Substitua pelo nome correto da coluna
filter(n() > 1) %>%
ungroup()
# Separar lojas que possuem pelo menos um valor de longitude preenchido
lojas_com_longitude <- lojas_duplicadas %>%
filter(!is.na(longitude))
# Separar lojas onde todas as duplicatas têm NA em longitude e remover apenas uma entrada
lojas_todas_na <- lojas_duplicadas %>%
filter(is.na(longitude)) %>%
group_by(Loja) %>%
slice(-1) %>%  # Remove apenas uma duplicata (mantém pelo menos uma)
ungroup()
# Remover todas as lojas duplicadas de dados_combinados
dados_combinados <- dados_combinados %>%
filter(!Loja %in% lojas_duplicadas$Loja)
# Inserir as lojas_com_longitude de volta em dados_combinados
dados_combinados <- bind_rows(dados_combinados, lojas_com_longitude)
na_combinados_longitude <- dados_combinados %>%
filter(is.na(longitude))
# Criando a coluna 'lojas_todas_na' com valores NA
dados_combinados$lojas_todas_na <- NA
# Criando a coluna 'lojas_todas_na' com valores NA
dados_combinados$lojas_todas_na <- NA
View(dados_combinados)
# Carregar pacotes necessários
library(readxl)
library(dplyr)
library(openxlsx)  # Para salvar o resultado em Excel
# Definir o diretório de trabalho (se necessário)
setwd("C:/Users/leona/Github/Web-Scraping-Maps-Rstudio/Lojas/Juntando Tudo")
# Carregar os arquivos Excel
criando_coord <- read_excel("Criando_coord.xlsx")
criando_coord_here <- read_excel("Criando_coord_HERE.xlsx")
# Unir os dois conjuntos de dados
dados_combinados <- bind_rows(criando_coord, criando_coord_here)
# Identificar lojas duplicadas
lojas_duplicadas <- dados_combinados %>%
group_by(Loja) %>%  # Substitua pelo nome correto da coluna
filter(n() > 1) %>%
ungroup()
# Separar lojas que possuem pelo menos um valor de longitude preenchido
lojas_com_longitude <- lojas_duplicadas %>%
filter(!is.na(longitude))
# Separar lojas onde todas as duplicatas têm NA em longitude e remover apenas uma entrada
lojas_todas_na <- lojas_duplicadas %>%
filter(is.na(longitude)) %>%
group_by(Loja) %>%
slice(-1) %>%  # Remove apenas uma duplicata (mantém pelo menos uma)
ungroup()
# Remover todas as lojas duplicadas de dados_combinados
dados_combinados <- dados_combinados %>%
filter(!Loja %in% lojas_duplicadas$Loja)
# Inserir as lojas_com_longitude de volta em dados_combinados
dados_combinados <- bind_rows(dados_combinados, lojas_com_longitude)
na_combinados_longitude <- dados_combinados %>%
filter(is.na(longitude))
# Suponha que ambas as tabelas tenham uma coluna em comum chamada "id_loja"
dados_finais <- lojas_todas_na %>%
left_join(dados_combinados, by = "id_loja")
# Suponha que ambas as tabelas tenham uma coluna em comum chamada "id_loja"
dados_finais <- lojas_todas_na %>%
left_join(dados_combinados, by = "loja")
# Suponha que ambas as tabelas tenham uma coluna em comum chamada "id_loja"
dados_finais <- lojas_todas_na %>%
left_join(dados_combinados, by = "loja")
# Suponha que ambas as tabelas tenham uma coluna em comum chamada "id_loja"
dados_finais <- lojas_todas_na %>%
left_join(dados_combinados, by = "Loja")
View(dados_combinados)
# Definir diretório
setwd("C:/Users/leona/Github/Web-Scraping-Maps-Rstudio/Lojas/Juntando Tudo")
# Carregar pacotes necessários
library(dplyr)
library(readr)
# Definir diretório
setwd("C:/Users/leona/Github/Web-Scraping-Maps-Rstudio/Lojas/Juntando Tudo")
# Carregar pacotes necessários
library(dplyr)
library(readr)
# Ler os arquivos
criando_coord <- read_csv("criando_coord.csv")
# Ler os arquivos
criando_coord <- read_csv("criando_coord.xslx")criando_coord_here <- read_csv("criando_coord_here.xslx")
# Ler os arquivos
criando_coord <- read_csv("criando_coord.xlsx")
# Carregar pacotes
library(readxl)
library(dplyr)
library(writexl)
# Definir caminho dos arquivos
caminho <- "C:/Users/leona/Github/Web-Scraping-Maps-Rstudio/Lojas/Juntando Tudo"
# Ler os arquivos XLSX
df1 <- read_excel(file.path(caminho, "criando_coord.xlsx"))
df2 <- read_excel(file.path(caminho, "criando_coord_here.xlsx"))
# Unir os dataframes
df_total <- bind_rows(df1, df2)
# Verificar lojas repetidas (assumindo que a coluna da loja se chama "loja")
repetidas <- df_total %>%
group_by(loja) %>%
filter(n() > 1) %>%
ungroup()
# Verificar lojas repetidas (assumindo que a coluna da loja se chama "loja")
repetidas <- df_total %>%
group_by(Loja) %>%
filter(n() > 1) %>%
ungroup()
# Verificar lojas repetidas (assumindo que a coluna da loja se chama "loja")
repetidas <- df_total %>%
group_by(Loja) %>%
filter(n() > 1) %>%
ungroup()
# Separar em dois dataframes
long_rep <- repetidas %>% filter(!is.na(longitude))   # Com longitude preenchida
na_rep <- repetidas %>% filter(is.na(longitude))      # Com NA na longitude
View(na_rep)
View(repetidas)
View(na_rep)
View(long_rep)
View(long_rep)
View(long_rep)
View(na_rep)
# Remover duplicatas dentro de na_rep considerando "Bairro" e "Loja"
na_rep <- na_rep %>%
distinct(Bairro, Loja, .keep_all = TRUE)
# Criar df2_long unindo long_rep com df2
df2_long <- bind_rows(df2, long_rep)
# Verificar quantas lojas em na_rep já estão presentes em df2_long
na_rep_presentes <- na_rep %>%
filter(Loja %in% df2_long$Loja)
# Contar o número de lojas presentes
num_presentes <- nrow(na_rep_presentes)
# Contar o número de lojas presentes
num_presentes <- nrow(na_rep_presentes)
# Contar o número de lojas presentes
num_presentes <- nrow(na_rep_presentes)
# Verificar lojas repetidas (assumindo que a coluna da loja se chama "loja")
repetidas <- df_total %>%
group_by(Loja) %>%
filter(n() > 1) %>%
ungroup()
View(df2_long)
# Remover duplicatas dentro de na_rep considerando "Bairro" e "Loja"
df2_long <- df2_long %>%
distinct(Bairro, Loja, .keep_all = TRUE)
View(df2_long)
# Salvar os resultados em arquivos Excel
write_xlsx(long_rep, file.path(caminho, "df2_long"))
# Salvar os resultados em arquivos Excel
write_xlsx(long_rep, file.path(caminho, "df2_long.xlsx"))
# Salvar os resultados em arquivos Excel
write_xlsx(df2_long, file.path(caminho, "Unindo_coord.xlsx"))
